# -*- coding: utf-8 -*-
"""
Created on Wed Jun 22 12:01:48 2022

@author: Shannon

Get results for accuracy.
We analyze the results that were generated by the server.
"""
import os
os.chdir(r"C:\Users\kroessks\Documents\PhD\Project 6")
# need to load this function explicitly to avoid issues with multipool
import pandas as pd
import numpy as np
import pickle as pickle
import matplotlib.pyplot as plt
import seaborn as sns
# prepare data to run svm going one donation back using all available donations. 

os.chdir(r"C:\Users\kroessks\Documents\PhD\Project 6\Data")
with open("data_original", "rb") as input_file:
    data_original= pickle.load(input_file)   

os.chdir(r"C:\Users\kroessks\Documents\PhD\Project 6\Results")
with open("AN_4000_noyear_correct_large4", "rb") as input_file:
    AN_total= pickle.load(input_file)
###################################################
n,d= data_original.shape

# We remove the KeyIDs and Year, because we will not anonymize this.
data2021= data_original.loc[data_original['Year'] == 2021, ]
data= data_original.drop(['KeyID'], axis = 1)
data= data.loc[data['Year'] != 2021, ]
data= data.drop(['Year'], axis = 1)
data.Sex= pd.factorize(data.Sex)[0] 
data_np= data.to_numpy()

reps=40
ns= np.array(np.array([1])*(data_np.shape[0]), dtype=int)
sample_size = 100
path = "C:/Users/kroessks/Documents/PhD/Project 6/Results/shap repeat/"

shapvals_all = np.zeros((2, len(ns), reps, 100, 7))
shapmeans = np.zeros((2, len(ns), reps, 7))
for n_i, n_ in enumerate(ns):
    for r, rep in enumerate(range(10, 50)):
        name="rep"+str(rep)+"_n_"+str(n_i)
        # print('n'+str(n_i))
        for i, sex in enumerate(['M', 'F']):
            filename1 = 'AN_X_'+ name + sex + str(sample_size) + '.pkl'
            filename2 = 'AN_shap_' + name + sex + str(sample_size) + '.pkl'
            # X_test is altijd hetzelfde, maar anders per geslacht
            X_test = pickle.load(open(path+filename1, 'rb'))
            # print(X_test.iloc[0])
            shapvals = pickle.load(open(path+filename2, 'rb'))
            shapvals_all[i][n_i][r] = shapvals
            shapmeans[i][n_i][r] = np.mean(np.absolute(shapvals), axis=0)
            # print(np.mean(np.absolute(shapvals), axis=0))

shapmeans_M = shapmeans[0]
shapmeans_F = shapmeans[1]

path = "C:/Users/kroessks/Documents/PhD/Project 6/test_results/"
name="shap_values_rep"+str(0)+"_n_"+str(0)
sex = 'F'
n = 100
filename1 = name + sex + str(100) + '.pkl'
filename2 = name + sex + str(100) + '.pkl'
shapvals = pickle.load(open(path+filename2, 'rb'))
OR_shap_F = np.mean(np.absolute(shapvals), axis=0)
path = "C:/Users/kroessks/Documents/PhD/Project 6/test_results/"
sex = 'M'
filename1 = name + sex + str(100) + '.pkl'
filename2 = name + sex + str(100) + '.pkl'
shapvals = pickle.load(open(path+filename2, 'rb'))
OR_shap_M = np.mean(np.absolute(shapvals), axis=0)

    
os.chdir(r"C:\Users\kroessks\Documents\PhD\Project 6\final")
var_names = np.array(["Time (hours)", "Age (years)", "Month", "Last ferritin",
                      "Time to last ferritin (days)", "Previous Hb",
                      "Time to previous Hb (days)"])

# try with broken axis
shapmeans_F0 = shapmeans_F[0]
var = np.repeat(var_names.reshape(-1,1), reps, axis=-1).T.reshape(1,-1)[0]
df = pd.DataFrame()
df['shap'] = shapmeans_F0.reshape(-1)
df['var'] = var
f, (ax1, ax2) = plt.subplots(ncols=2, nrows=1, sharey=True, dpi=400)
ax = sns.violinplot(data=df, x="shap", y="var", inner = None, ax=ax1, color="darksalmon")
ax1.scatter(OR_shap_F, var_names, c="black", s=25)
plt.ylabel("")
ax = sns.violinplot(data=df, x="shap", y="var", inner = None, ax=ax2, color="darksalmon")
ax2.scatter(OR_shap_F, var_names, c="black", s=25)
ax1.set_xlim(0, .15)
ax1.set_xticks(np.array([0, 0.05, 0.1, .15]))
ax2.set_xlim(.3, .45)
ax2.tick_params(left=False)
ax1.tick_params(left=False)
plt.subplots_adjust(wspace=0.2, hspace=0)
ax2.spines[['left']].set_visible(False)
ax1.spines[['right']].set_visible(False)
ax1.spines[['top']].set_visible(False)
ax2.spines[['top']].set_visible(False)
ax2.spines[['right']].set_visible(False)
ax1.spines[['left']].set_visible(False)

d = .015  # how big to make the diagonal lines in axes coordinates
# arguments to pass plot, just so we don't keep repeating them
kwargs = dict(transform=ax.transAxes, color='k', clip_on=False)
ax1.plot((-.2-d,-.2 +d), (-d, +d), **kwargs)
# ax1.plot((1-d, 1+d), (1-d, 1+d), **kwargs)
ax1.set_ylabel(' ')
ax2.set_ylabel(' ')
ax1.set_xlabel(' ')
ax2.set_xlabel(' ')
kwargs.update(transform=ax2.transAxes)  # switch to the bottom axes
# ax2.plot((-d, +d), (1-d, 1+d), **kwargs)
ax2.plot((-d, +d), (-d, +d), **kwargs)
f.text(0.5, 0.0, 'SHAP values', ha='center')
plt.savefig('figures/shap_females.png', dpi=600, bbox_inches = 'tight')


# try with broken axis
shapmeans_M0 = shapmeans_M[0]
var = np.repeat(var_names.reshape(-1,1), reps, axis=-1).T.reshape(1,-1)[0]
df = pd.DataFrame()
df['shap'] = shapmeans_M0.reshape(-1)
df['var'] = var
f, (ax1, ax2) = plt.subplots(ncols=2, nrows=1, sharey=True, dpi=400)
ax = sns.violinplot(data=df, x="shap", y="var", inner = None, ax=ax1, color="lightsteelblue")
ax1.scatter(OR_shap_M, var_names, c="black", s=25)
plt.ylabel("")
ax = sns.violinplot(data=df, x="shap", y="var", inner = None, ax=ax2, color="lightsteelblue")
ax2.scatter(OR_shap_M, var_names, c="black", s=25)
ax1.set_xlim(0, .15)
ax1.set_xticks(np.array([0, 0.05, 0.1, .15]))
ax2.set_xlim(.3, .45)
ax2.tick_params(left=False)
ax1.tick_params(left=False)
plt.subplots_adjust(wspace=0.2, hspace=0)
ax2.spines[['left']].set_visible(False)
ax1.spines[['right']].set_visible(False)
ax1.spines[['top']].set_visible(False)
ax2.spines[['top']].set_visible(False)
ax2.spines[['right']].set_visible(False)
ax1.spines[['left']].set_visible(False)

d = .015  # how big to make the diagonal lines in axes coordinates
# arguments to pass plot, just so we don't keep repeating them
kwargs = dict(transform=ax.transAxes, color='k', clip_on=False)
ax1.plot((-.2-d,-.2 +d), (-d, +d), **kwargs)
# ax1.plot((1-d, 1+d), (1-d, 1+d), **kwargs)
ax1.set_ylabel(' ')
ax2.set_ylabel(' ')
ax1.set_xlabel(' ')
ax2.set_xlabel(' ')
kwargs.update(transform=ax2.transAxes)  # switch to the bottom axes
# ax2.plot((-d, +d), (1-d, 1+d), **kwargs)
ax2.plot((-d, +d), (-d, +d), **kwargs)
f.text(0.5, 0.0, 'SHAP values', ha='center')
plt.savefig('figures/shap_males.png', dpi=600, bbox_inches = 'tight')





    

    
        